#!/bin/bash

# LAUNCH with 2 arguments:
# startindex (default = 1): Jobs will run in the directories job.STARTINDEX, job.STARTINDEX+1, ...
# samplestart (default = 1): Skip SAMPLESTART-1 random numbers in the stream before starting
# The number of independent serial jobs that will run is set in the "hostfile"

startindex=1
samplestart=1

renum='^[0-9]+$'

if [ -z "$1" ]; then
startindex=1
elif ! [[ $1 =~ $renum ]]; then
echo argument 1 must be a number
exit 1
else
startindex=$1
fi
echo jobs will run starting in job.$startindex, ...

if [ -z "$2" ]; then
samplestart=1
elif ! [[ $2 =~ $renum ]]; then
echo argument 2 must be a number
exit 2
else
samplestart=$2
fi
echo jobs will start with random number $samplestart

i=0
while read -r line
do
	tmp=($line)
	n=${tmp[0]}
	c=${tmp[1]}
	if [ "$n" != "" ]; then
		node[i]=$n
		cores[i]=$c
		i=$((i+1))
		ntot=$((ntot+c))
	else
		if [ $i -gt 0 ]; then
			break
		fi
	fi
done < "hostfile"

echo "Launching $ntot jobs on the $i nodes: ${node[*]}"

cwd=`pwd`

l=$((startindex-1))

j=0
while [ $j -lt $i ]; do
k=1
cat << EOF1 > ${node[$j]}.x
#!/bin/bash

cd $cwd

EOF1

while [ $k -le ${cores[$j]} ]; do
l=$((l+1))
dir=job."$l"
if [ -d "$dir" ]; then
echo "$dir exists. Quitting the script."
exit 1
fi

### Specialized stuff ###
if [ $sampletype == 0 ]; then
#seed=$((RANDOM + 1))  # 1 to 32768...
seed=$((samplestart + samplespercore*(l-startindex) ))
elif [ $sampletype == 1 ]; then
seed=$((samplestart + samplespercore*(l-startindex) ))
else
echo bad sample type
exit 1
fi
cat << EOF >> ${node[$j]}.x
cp -R r0 $dir
cd $dir
/bin/rm input
while read -r line
do
line=\${line//RANSEED/$seed}
line=\${line//TYPE/$sampletype}
line=\${line//SAMPLES/$samplespercore} 
echo \$line >> input
done < "../r0/input"
/home/ajasper/autofit/exe/sample-molpro.x.opt < input > output &
cd ..

EOF
### End specialized stuff ###

k=$((k+1))
done
chmod u+x ${node[$j]}.x
echo "/usr/bin/ssh ${node[$j]} killall -u ajasper" >> killall.x
echo "echo ${node[$j]} " >> monitor.x
echo "/usr/bin/ssh ${node[$j]} ps | grep -c sample " >> monitor.x
/usr/bin/ssh ${node[$j]} $cwd/${node[$j]}.x &
j=$((j+1))
done
